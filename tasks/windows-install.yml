# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - java_version
  - java_home
  - temp_folder
  - java_download_filename
  - java_download_url
  - java_installation_folder
  - java_bin


# validate if installed

- name: Check if java exists
  win_stat:
    path: "{{ java_bin }}\\java.exe"
  register: java_exists

# install java

- name: install java
  block:

    - name: make sure temp folder
      win_file:
        path: "{{ temp_folder }}"
        state: directory

    - name: download java from s3 url
      win_get_url:
        url: "{{ java_download_url }}"
        dest: "{{ temp_folder }}\\{{ java_download_filename }}"
        timeout: "{{ download_timeout | default(60) }}"
        force: no
    
    - name: make sure java installation folder exists
      win_file:
        path: "{{ java_installation_folder }}"
        state: directory
      become: yes
    
    - name: unzip java file
      win_unzip:
        src: "{{ temp_folder }}\\{{ java_download_filename }}"
        dest: "{{ java_installation_folder }}"
        remote_src: yes
        creates: "{{ java_bin }}\\java.exe"
      become: yes
      register: unzip_java
      ignore_errors: yes
    
    - name: sleep for 25 seconds if unzip java fails
      pause:
        seconds: 25
      when: unzip_java.rc != 0

    - name: rerun - unzip java file if first fails
      win_unzip:
        src: "{{ temp_folder }}\\{{ java_download_filename }}"
        dest: "{{ java_installation_folder }}"
        remote_src: yes
        creates: "{{ java_bin }}\\java.exe"
      become: yes
      when: unzip_java.rc != 0

  when: not java_exists.stat.exists

- name: Set JAVA_HOME
  win_environment:
    state: present
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    level: machine
  loop:
    - { name: "JAVA_HOME", value: "{{ java_home }}" }
  become: yes

- name: Set JAVA PATH
  win_path:
    state: present
    elements: "{{ java_bin }}"
    scope: machine
  become: yes

- name: make sure java is installed on the machine
  win_command: "java -version"
  register: java_test
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: java must be accesible in path
  when: java_test.rc != 0

- name: validate if the version mismatch in system environment variables path
  fail:
    msg: "WARNING: installed java version {{ java_version }} and the system environment path {{ java_test.stderr_lines[0] }} is mismatch. Remove the other {{ java_test.stderr_lines[0] }} from system environment variables path."
  when: "java_version not in java_test.stderr"
  ignore_errors: yes


# expose role output 

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      java_home: "{{ java_home }}"
      java_bin: "{{ java_bin }}"